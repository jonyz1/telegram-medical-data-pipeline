{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.4", "generated_at": "2025-07-14T13:53:55.822320Z", "invocation_id": "fabb39d1-cfd3-4c9a-86af-b4a70c6827b5", "invocation_started_at": "2025-07-14T13:53:53.546078Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-14T13:53:55.144542Z", "completed_at": "2025-07-14T13:53:55.160487Z"}, {"name": "execute", "started_at": "2025-07-14T13:53:55.185157Z", "completed_at": "2025-07-14T13:53:55.321966Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.20174360275268555, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.telegram_data_warehouse.stg_image_detections", "compiled": true, "compiled_code": "\n\n-- Staging model to clean raw image detection data\nSELECT\n    message_id,\n    channel_name,\n    detected_object_class,\n    confidence_score,\n    processed_at\nFROM raw.image_detections\nWHERE confidence_score BETWEEN 0 AND 1  -- Ensure valid confidence scores", "relation_name": "\"hello\".\"public_staging\".\"stg_image_detections\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-14T13:53:55.128327Z", "completed_at": "2025-07-14T13:53:55.151246Z"}, {"name": "execute", "started_at": "2025-07-14T13:53:55.151246Z", "completed_at": "2025-07-14T13:53:55.330070Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.20174360275268555, "adapter_response": {"_message": "SELECT 365", "code": "SELECT", "rows_affected": 365}, "message": "SELECT 365", "failures": null, "unique_id": "model.telegram_data_warehouse.dim_dates", "compiled": true, "compiled_code": "-- \n\n-- -- Dimension table for time-based analysis\n-- WITH date_range AS (\n--     SELECT generate_series(\n--         '2025-01-01'::DATE,\n--         '2025-12-31'::DATE,\n--         INTERVAL '1 day'\n--     ) AS date_day\n-- )\n-- SELECT\n--     (EXTRACT(EPOCH FROM date_day)::BIGINT * 1000) AS date_id,\n--     date_day,\n--     EXTRACT(YEAR FROM date_day) AS year,\n--     EXTRACT(MONTH FROM date_day) AS month,\n--     EXTRACT(DAY FROM date_day) AS day,\n--     EXTRACT(DOW FROM date_day) AS day_of_week,\n--     EXTRACT(WEEK FROM date_day) AS week_of_year\n-- FROM date_range\n\n\n\n-- Dimension table for time-based analysis\nWITH date_range AS (\n    SELECT generate_series(\n        '2025-01-01'::TIMESTAMP WITH TIME ZONE,\n        '2025-12-31'::TIMESTAMP WITH TIME ZONE,\n        INTERVAL '1 day'\n    ) AS date_day\n)\nSELECT\n    (EXTRACT(EPOCH FROM date_day)::BIGINT * 1000) AS date_id,\n    date_day,\n    EXTRACT(YEAR FROM date_day) AS year,\n    EXTRACT(MONTH FROM date_day) AS month,\n    EXTRACT(DAY FROM date_day) AS day,\n    EXTRACT(DOW FROM date_day) AS day_of_week,\n    EXTRACT(WEEK FROM date_day) AS week_of_year\nFROM date_range", "relation_name": "\"hello\".\"public_public_marts\".\"dim_dates\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-14T13:53:55.147753Z", "completed_at": "2025-07-14T13:53:55.202041Z"}, {"name": "execute", "started_at": "2025-07-14T13:53:55.202041Z", "completed_at": "2025-07-14T13:53:55.451063Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3227365016937256, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.telegram_data_warehouse.stg_telegram_messages", "compiled": true, "compiled_code": "-- \n\n-- -- Staging model to clean and extract fields from raw JSON data\n-- SELECT\n--     id AS message_id,\n--     channel_name,\n--     message_date::TIMESTAMP AS message_date,\n--     (message_data->>'text')::TEXT AS message_text,\n--     (message_data->>'sender_id')::BIGINT AS sender_id,\n--     (message_data->>'has_media')::BOOLEAN AS has_media,\n--     (message_data->>'media_type')::TEXT AS media_type,\n--     (message_data->>'media_path')::TEXT AS media_path,\n--     (message_data->>'caption')::TEXT AS caption,\n--     (message_data->>'is_reply')::BOOLEAN AS is_reply,\n--     (message_data->>'forwarded_from')::BIGINT AS forwarded_from,\n--     loaded_at\n-- FROM raw.telegram_messages\n\n\n\n\n\n-- Staging model to clean and extract fields from raw JSON data\nWITH numbered_messages AS (\n    SELECT\n        id AS message_id,\n        channel_name,\n        message_date::TIMESTAMP AS message_date,\n        (message_data->>'text')::TEXT AS message_text,\n        (message_data->>'sender_id')::BIGINT AS sender_id,\n        (message_data->>'has_media')::BOOLEAN AS has_media,\n        (message_data->>'media_type')::TEXT AS media_type,\n        (message_data->>'media_path')::TEXT AS media_path,\n        (message_data->>'caption')::TEXT AS caption,\n        (message_data->>'is_reply')::BOOLEAN AS is_reply,\n        (message_data->>'forwarded_from')::BIGINT AS forwarded_from,\n        loaded_at,\n        ROW_NUMBER() OVER (\n            PARTITION BY id, channel_name, message_date::DATE\n            ORDER BY loaded_at\n        ) AS row_num\n    FROM raw.telegram_messages\n)\n\nSELECT *\nFROM numbered_messages\nWHERE row_num = 1", "relation_name": "\"hello\".\"public_staging\".\"stg_telegram_messages\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-14T13:53:55.451063Z", "completed_at": "2025-07-14T13:53:55.465367Z"}, {"name": "execute", "started_at": "2025-07-14T13:53:55.466398Z", "completed_at": "2025-07-14T13:53:55.538984Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.087921142578125, "adapter_response": {"_message": "SELECT 2", "code": "SELECT", "rows_affected": 2}, "message": "SELECT 2", "failures": null, "unique_id": "model.telegram_data_warehouse.dim_channels", "compiled": true, "compiled_code": "-- \n\n-- -- Dimension table for Telegram channels\n-- WITH source AS (\n--     SELECT DISTINCT channel_name\n--     FROM \"hello\".\"public_staging\".\"stg_telegram_messages\"\n-- )\n-- SELECT\n--     ROW_NUMBER() OVER () AS channel_id,\n--     channel_name\n-- FROM source\n\n\n\n\n-- Dimension table for Telegram channels\nWITH source AS (\n    SELECT DISTINCT channel_name\n    FROM \"hello\".\"public_staging\".\"stg_telegram_messages\"\n)\nSELECT\n    ROW_NUMBER() OVER () AS channel_id,\n    channel_name\nFROM source", "relation_name": "\"hello\".\"public_public_marts\".\"dim_channels\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-14T13:53:55.547241Z", "completed_at": "2025-07-14T13:53:55.547241Z"}, {"name": "execute", "started_at": "2025-07-14T13:53:55.547241Z", "completed_at": "2025-07-14T13:53:55.639460Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09221959114074707, "adapter_response": {"_message": "SELECT 200", "code": "SELECT", "rows_affected": 200}, "message": "SELECT 200", "failures": null, "unique_id": "model.telegram_data_warehouse.fct_messages", "compiled": true, "compiled_code": "-- \n\n-- -- Fact table for Telegram messages, linking to dim_channels and dim_dates\n-- -- Contains metrics like message_length and supports analysis of visual content and trends\n-- WITH messages AS (\n--     SELECT\n--         m.message_id,\n--         m.channel_name,\n--         m.message_date,\n--         m.message_text,\n--         m.sender_id,\n--         m.has_media,\n--         m.media_type,\n--         m.media_path,\n--         m.caption,\n--         m.is_reply,\n--         m.forwarded_from,\n--         LENGTH(COALESCE(m.message_text, '')) AS message_length,\n--         c.channel_id,\n--         (EXTRACT(EPOCH FROM m.message_date)::BIGINT * 1000) AS date_id\n--     FROM \"hello\".\"public_staging\".\"stg_telegram_messages\" m\n--     LEFT JOIN \"hello\".\"public_public_marts\".\"dim_channels\" c\n--         ON m.channel_name = c.channel_name\n-- )\n-- SELECT\n--     (channel_id || '-' || message_id || '-' || date_id)::TEXT AS message_key,\n--     channel_id,\n--     date_id,\n--     message_id,\n--     message_text,\n--     sender_id,\n--     has_media,\n--     media_type,\n--     media_path,\n--     caption,\n--     is_reply,\n--     forwarded_from,\n--     message_length\n-- FROM messages\n\n\n\n\n-- Fact table for Telegram messages, linking to dim_channels and dim_dates\nWITH messages AS (\n    SELECT\n        m.message_id,\n        m.channel_name,\n        m.message_date,\n        m.message_text,\n        m.sender_id,\n        m.has_media,\n        m.media_type,\n        m.media_path,\n        m.caption,\n        m.is_reply,\n        m.forwarded_from,\n        LENGTH(COALESCE(m.message_text, '')) AS message_length,\n        c.channel_id,\n        (EXTRACT(EPOCH FROM m.message_date)::BIGINT * 1000) AS date_id\n    FROM \"hello\".\"public_staging\".\"stg_telegram_messages\" m\n    LEFT JOIN \"hello\".\"public_public_marts\".\"dim_channels\" c\n        ON m.channel_name = c.channel_name\n)\nSELECT\n    (COALESCE(channel_id::TEXT, 'unknown') || '-' || message_id || '-' || date_id)::TEXT AS message_key,\n    channel_id,\n    date_id,\n    message_id,\n    message_text,\n    sender_id,\n    has_media,\n    media_type,\n    media_path,\n    caption,\n    is_reply,\n    forwarded_from,\n    message_length\nFROM messages", "relation_name": "\"hello\".\"public_public_marts\".\"fct_messages\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-14T13:53:55.647701Z", "completed_at": "2025-07-14T13:53:55.655753Z"}, {"name": "execute", "started_at": "2025-07-14T13:53:55.655753Z", "completed_at": "2025-07-14T13:53:55.750295Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.10722494125366211, "adapter_response": {"_message": "SELECT 133", "code": "SELECT", "rows_affected": 133}, "message": "SELECT 133", "failures": null, "unique_id": "model.telegram_data_warehouse.fct_image_detections", "compiled": true, "compiled_code": "-- \n\n-- -- Fact table for image detections, linking to fct_messages and dim_channels\n-- WITH detections AS (\n--     SELECT\n--         d.message_id,\n--         d.channel_name,\n--         d.detected_object_class,\n--         d.confidence_score,\n--         d.processed_at,\n--         c.channel_id\n--     FROM \"hello\".\"public_staging\".\"stg_image_detections\" d\n--     JOIN \"hello\".\"public_public_marts\".\"dim_channels\" c\n--         ON d.channel_name = c.channel_name\n-- )\n-- SELECT\n--     (d.channel_id || '-' || d.message_id || '-' || d.detected_object_class || '-' || d.processed_at)::TEXT AS detection_key,\n--     d.channel_id,\n--     d.message_id,\n--     d.detected_object_class,\n--     d.confidence_score,\n--     d.processed_at\n-- FROM detections d\n-- JOIN \"hello\".\"public_public_marts\".\"fct_messages\" m\n--     ON d.message_id = m.message_id\n--     AND d.channel_id = m.channel_id\n\n\n\n\n-- Fact table for image detections, linking to fct_messages and dim_channels\nWITH detections AS (\n    SELECT\n        d.message_id,\n        d.channel_name,\n        d.detected_object_class,\n        d.confidence_score,\n        d.processed_at,\n        c.channel_id\n    FROM \"hello\".\"public_staging\".\"stg_image_detections\" d\n    JOIN \"hello\".\"public_public_marts\".\"dim_channels\" c\n        ON d.channel_name = c.channel_name\n)\nSELECT\n    (d.channel_id || '-' || d.message_id || '-' || d.detected_object_class || '-' || d.processed_at)::TEXT AS detection_key,\n    d.channel_id,\n    d.message_id,\n    d.detected_object_class,\n    d.confidence_score,\n    d.processed_at\nFROM detections d\nJOIN \"hello\".\"public_public_marts\".\"fct_messages\" m\n    ON d.message_id = m.message_id\n    AND d.channel_id = m.channel_id", "relation_name": "\"hello\".\"public_public_marts\".\"fct_image_detections\"", "batch_results": null}], "elapsed_time": 1.0788609981536865, "args": {"populate_cache": true, "log_file_max_bytes": 10485760, "exclude": [], "skip_nodes_if_on_run_start_fails": false, "use_colors_file": true, "partial_parse_file_diff": true, "validate_macro_args": false, "select": [], "favor_state": false, "require_yaml_configuration_for_mf_time_spines": false, "use_colors": true, "warn_error_options": {"error": [], "warn": [], "silence": []}, "log_format_file": "debug", "use_fast_test_edges": false, "invocation_command": "dbt run", "print": true, "log_level": "info", "log_level_file": "debug", "show_all_deprecations": false, "source_freshness_run_project_hooks": true, "state_modified_compare_vars": false, "project_dir": "C:\\Users\\HP ENVY\\Desktop\\weak7\\dbt", "strict_mode": false, "static_parser": true, "which": "run", "state_modified_compare_more_unrendered_values": false, "version_check": true, "write_json": true, "vars": {}, "introspect": true, "require_all_warnings_handled_by_warn_error": false, "require_explicit_package_overrides_for_builtin_materializations": true, "printer_width": 80, "indirect_selection": "eager", "require_resource_names_without_spaces": true, "send_anonymous_usage_stats": true, "require_batched_execution_for_custom_microbatch_strategy": false, "upload_to_artifacts_ingest_api": false, "cache_selected_only": false, "macro_debugging": false, "profiles_dir": "C:\\Users\\HP ENVY\\Desktop\\weak7\\dbt", "require_nested_cumulative_type_params": false, "show_resource_report": false, "empty": false, "defer": false, "log_path": "C:\\Users\\HP ENVY\\Desktop\\weak7\\dbt\\logs", "log_format": "default", "partial_parse": true, "quiet": false}}